package classes.views.body.menu {	import flash.display.Sprite;	import flash.trace.Trace;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.events.MouseEvent;		public class MenuTile extends Sprite {		private var background:Shape;		private var titleTextField:TextField;		private var descriptionTextField:TextField;		private var tileHeight:Number;		private var tileWidth:Number;		private var defaultColor:uint;		private var hoverColor:uint;		private var defaultX:uint;		private var defaultY:uint;		public function MenuTile(defaultX:uint, defaultY:uint, tileWidth:Number, tileHeight:Number, defaultColor:uint, hoverColor:uint) {			this.defaultX = defaultX;			this.defaultY = defaultY;			this.defaultColor = defaultColor;			this.hoverColor = hoverColor;			this.tileHeight = tileHeight;			this.tileWidth = tileWidth;						this.buttonMode = true;						this.restorePosition();						this.background = new Shape();			addChild(background);			this.setBackgroundColor(defaultColor);									initTitleTextField();			initDescriptionTextField();						this.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			this.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);		}				public function restorePosition() {			this.x = this.defaultX;			this.y = this.defaultY;		}				private function initTitleTextField() {			var textFormat:TextFormat = new TextFormat();			textFormat.font = "Helvetica";			textFormat.size = 20;			textFormat.color = 0xFFFFFF;			textFormat.leftMargin = 5;			textFormat.rightMargin = 0;			textFormat.leading = 0;						this.titleTextField = new TextField();			this.titleTextField.defaultTextFormat = textFormat;			this.titleTextField.width = width;						addChild(titleTextField);		}				private function initDescriptionTextField() {			var textFormat:TextFormat = new TextFormat();			textFormat.font = "Helvetica";			textFormat.size = 10;			textFormat.color = 0xFFFFFF;			textFormat.leftMargin = 5;			textFormat.rightMargin = 5;			textFormat.leading = 0;			textFormat.align = "justify";						this.descriptionTextField = new TextField();			this.descriptionTextField.y = 0; 			this.descriptionTextField.defaultTextFormat = textFormat;			this.descriptionTextField.width = width;			this.descriptionTextField.autoSize = "none"; 			this.descriptionTextField.multiline = true;			this.descriptionTextField.wordWrap = true;						addChild(descriptionTextField);					}				private function setBackgroundColor(color:Number) {			this.background.graphics.beginFill(color); // choosing the colour for the fill, here it is red			this.background.graphics.drawRect(0, 0, tileWidth, tileHeight); // (x spacing, y spacing, width, height)			this.background.graphics.endFill(); // not always needed but I like to put it in to end the fill		}				private function updateTextFields() {			this.titleTextField.y = this.tileHeight - this.titleTextField.textHeight - this.descriptionTextField.textHeight - 5;			this.descriptionTextField.y = this.tileHeight - this.descriptionTextField.textHeight - 5;			this.descriptionTextField.height = this.descriptionTextField.textHeight + 5;			this.titleTextField.height = this.titleTextField.textHeight;		}				public function setTitle(title:String) {			this.titleTextField.text = title;			this.updateTextFields();		}				public function setDescription(description:String) {			this.descriptionTextField.text = description;			this.updateTextFields();		}				private function onMouseOver(evt:MouseEvent) {			this.setBackgroundColor(this.hoverColor);		}				private function onMouseOut(evt:MouseEvent) {			this.setBackgroundColor(this.defaultColor);		}	}	}