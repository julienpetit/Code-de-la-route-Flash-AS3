package classes.controllers {	import flash.ui.MouseCursor;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextFormat;	import classes.views.QuizQuestionView;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class QuizController {		var currentQuestion = 0;		var score:int;		var questions:Array;		var lastQuestionSuccessful:Boolean;		var view;		private var delay:uint = 1000;        private var repeat:uint = 10;		private var repeat1:uint = 10;		private var myTimer:Timer;				public function QuizController(_view, _questions) {			this.view = new QuizQuestionView(_view);			this.questions = _questions;			this.score = 0;			this.lastQuestionSuccessful = true;						myTimer = new Timer(delay, repeat1);			myTimer.addEventListener(TimerEvent.TIMER, timerHandler);            myTimer.addEventListener(TimerEvent.TIMER_COMPLETE, completeHandler);			this.changeQuestion();		}				public function resetTimer() {			myTimer.reset();			delay = 1000;			repeat = 10;			myTimer.start();             view.getView().statusTextField.text = "You have " + ((delay * repeat) / 1000)                                  + " seconds to write your response.";		}		public function changeQuestion() {			this.view.setButtonEnabled(true);			this.resetTimer(); 								 			this.lastQuestionSuccessful = true;			trace("changeQuestion");			view.clearInstanciatedAnswers();						view.setLabelQuestionCounter((this.currentQuestion + 1) + "/" + this.questions.length);						view.getView().labelQuestion.text = questions[currentQuestion].getQuestion();						// Get array of answers models			var answers = questions[currentQuestion].getAnswers();					view.addButtonsRadio(answers);		}				public function isGoodAnswer() {			return this.view.getInstanciatedAnswers()[this.questions[this.currentQuestion].getGoodAnswer()].selected;		}				public function handlerNextQuestionAction(event:MouseEvent) {			if(currentQuestion + 1 >= questions.length) {				view.clearInstanciatedAnswers();				this.myTimer.stop();				view.getView().gotoAndPlay(3);				view.showFinalScore(score, questions.length);				return;			}			if(isGoodAnswer() && this.lastQuestionSuccessful) {												this.lastQuestionSuccessful = true;				trace("Good");				score += 1;				currentQuestion++;				changeQuestion();				trace(score);				view.setLabelScore("score : " + score);							}			else {				trace("Bad");								if(this.lastQuestionSuccessful) {					view.setWrongAnswer();					//this.view.setButtonEnabled(false);					view.setGoodAnswer(this.questions[this.currentQuestion].getGoodAnswer());					this.lastQuestionSuccessful = false;				} else {					currentQuestion++;					changeQuestion();				}			}		}		public function handlerBackToHomeAction(event:MouseEvent) {			view.clearInstanciatedAnswers();			this.myTimer.stop();			view.getView().gotoAndPlay(1, "MenuScene");		}				private function timerHandler(e:TimerEvent):void{            repeat--;			trace("TIMER");            view.getView().statusTextField.text = ((delay * repeat) / 1000) + " seconds left.";        }        private function completeHandler(e:TimerEvent):void {            view.getView().statusTextField.text = "Times Up.";			this.lastQuestionSuccessful = false;            //inputTextField.type = TextFieldType.DYNAMIC;    			this.view.setButtonEnabled(false);        }	}	}